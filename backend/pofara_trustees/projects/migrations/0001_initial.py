# Generated by Django 5.2.4 on 2025-07-28 08:34

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inspectors', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_number', models.CharField(help_text='Unique project identifier', max_length=20, unique=True)),
                ('title', models.CharField(help_text='Project title', max_length=200)),
                ('description', models.TextField(help_text='Detailed project description')),
                ('project_type', models.CharField(choices=[('construction', 'Construction'), ('renovation', 'Renovation'), ('business_setup', 'Business Setup'), ('property_management', 'Property Management'), ('agriculture', 'Agriculture'), ('investment', 'Investment'), ('other', 'Other')], max_length=30)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('approved', 'Approved'), ('in_progress', 'In Progress'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('disputed', 'Disputed')], default='draft', max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('country', models.CharField(help_text='Country where project is located', max_length=100)),
                ('state_province', models.CharField(blank=True, help_text='State or province', max_length=100)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('address', models.TextField(help_text='Full project address')),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('coordinates_lat', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinates', max_digits=10, null=True)),
                ('coordinates_lng', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinates', max_digits=10, null=True)),
                ('budget_currency', models.CharField(default='USD', help_text='Currency code (ISO 4217)', max_length=3)),
                ('total_budget', models.DecimalField(decimal_places=2, help_text='Total project budget', max_digits=15)),
                ('spent_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount already spent', max_digits=15)),
                ('escrow_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount held in escrow', max_digits=15)),
                ('planned_start_date', models.DateField(help_text='Planned project start date')),
                ('planned_end_date', models.DateField(help_text='Planned project completion date')),
                ('actual_start_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('completion_percentage', models.PositiveIntegerField(default=0, help_text='Project completion percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('requirements', models.JSONField(blank=True, default=dict, help_text='Project requirements and specifications')),
                ('deliverables', models.JSONField(blank=True, default=list, help_text='List of expected project deliverables')),
                ('stakeholders', models.JSONField(blank=True, default=list, help_text='List of project stakeholders and their roles')),
                ('communication_preferences', models.JSONField(blank=True, default=dict, help_text='Communication preferences and frequency')),
                ('risk_assessment', models.TextField(blank=True, help_text='Risk assessment and mitigation strategies')),
                ('compliance_requirements', models.JSONField(blank=True, default=list, help_text='Regulatory and compliance requirements')),
                ('quality_standards', models.JSONField(blank=True, default=list, help_text='Quality standards and benchmarks')),
                ('success_criteria', models.TextField(blank=True, help_text='Project success criteria')),
                ('is_public', models.BooleanField(default=False, help_text='Whether project is publicly visible')),
                ('allow_inspector_applications', models.BooleanField(default=True, help_text='Allow inspectors to apply for this project')),
                ('requires_background_check', models.BooleanField(default=True, help_text='Require inspector background check')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_inspector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_projects', to='inspectors.inspector')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('order', models.PositiveIntegerField(help_text='Milestone order in the project')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('planned_start_date', models.DateField()),
                ('planned_end_date', models.DateField()),
                ('actual_start_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('budget_allocation', models.DecimalField(decimal_places=2, help_text='Budget allocated to this milestone', max_digits=12)),
                ('actual_cost', models.DecimalField(decimal_places=2, default=0.0, help_text='Actual cost incurred', max_digits=12)),
                ('payment_released', models.BooleanField(default=False)),
                ('payment_release_date', models.DateTimeField(blank=True, null=True)),
                ('deliverables', models.JSONField(blank=True, default=list, help_text='Specific deliverables for this milestone')),
                ('acceptance_criteria', models.TextField(blank=True, help_text='Criteria for milestone acceptance')),
                ('requires_inspection', models.BooleanField(default=True)),
                ('inspection_completed', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('completion_percentage', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_milestones', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='projects.project')),
            ],
            options={
                'verbose_name': 'Project Milestone',
                'verbose_name_plural': 'Project Milestones',
                'db_table': 'project_milestones',
                'ordering': ['project', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ProjectDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('document_type', models.CharField(choices=[('contract', 'Contract'), ('permit', 'Permit'), ('blueprint', 'Blueprint'), ('specification', 'Specification'), ('invoice', 'Invoice'), ('receipt', 'Receipt'), ('report', 'Report'), ('photo', 'Photo'), ('video', 'Video'), ('other', 'Other')], max_length=20)),
                ('file', models.FileField(upload_to='project_documents/%Y/%m/')),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(help_text='MIME type', max_length=50)),
                ('access_level', models.CharField(choices=[('public', 'Public'), ('stakeholders', 'Stakeholders Only'), ('owner_inspector', 'Owner and Inspector Only'), ('owner_only', 'Owner Only'), ('confidential', 'Confidential')], default='stakeholders', max_length=20)),
                ('is_signed', models.BooleanField(default=False, help_text='Document is digitally signed')),
                ('requires_approval', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('is_latest_version', models.BooleanField(default=True)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Document tags for organization')),
                ('checksum', models.CharField(blank=True, help_text='File integrity checksum', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_documents', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='projects.project')),
                ('superseded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supersedes', to='projects.projectdocument')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents', to='projects.projectmilestone')),
            ],
            options={
                'verbose_name': 'Project Document',
                'verbose_name_plural': 'Project Documents',
                'db_table': 'project_documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InspectionReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_number', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('summary', models.TextField(help_text='Executive summary of the inspection')),
                ('detailed_findings', models.TextField(help_text='Detailed inspection findings')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('reviewed', 'Reviewed'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='draft', max_length=20)),
                ('overall_status', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('satisfactory', 'Satisfactory'), ('needs_improvement', 'Needs Improvement'), ('poor', 'Poor'), ('failed', 'Failed')], max_length=30)),
                ('compliance_score', models.PositiveIntegerField(help_text='Compliance score as percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('inspection_date', models.DateTimeField()),
                ('inspection_duration_hours', models.DecimalField(decimal_places=2, help_text='Duration of inspection in hours', max_digits=5)),
                ('weather_conditions', models.CharField(blank=True, max_length=200)),
                ('access_conditions', models.CharField(blank=True, max_length=200)),
                ('issues_found', models.JSONField(blank=True, default=list, help_text='List of issues and problems found')),
                ('recommendations', models.JSONField(blank=True, default=list, help_text='List of recommendations for improvement')),
                ('next_inspection_date', models.DateField(blank=True, null=True)),
                ('safety_rating', models.PositiveIntegerField(help_text='Safety rating from 1 to 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.PositiveIntegerField(help_text='Quality rating from 1 to 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('progress_rating', models.PositiveIntegerField(help_text='Progress rating from 1 to 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_comments', models.TextField(blank=True)),
                ('inspector_signature', models.TextField(blank=True, help_text='Digital signature data')),
                ('signature_timestamp', models.DateTimeField(blank=True, null=True)),
                ('verification_hash', models.CharField(blank=True, max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('inspector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='inspectors.inspector')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inspection_reports', to='projects.project')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inspection_reports', to='projects.projectmilestone')),
            ],
            options={
                'verbose_name': 'Inspection Report',
                'verbose_name_plural': 'Inspection Reports',
                'db_table': 'inspection_reports',
                'ordering': ['-inspection_date'],
            },
        ),
        migrations.CreateModel(
            name='ProjectUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField(help_text='Update content and details')),
                ('update_type', models.CharField(choices=[('progress', 'Progress Update'), ('milestone', 'Milestone Update'), ('issue', 'Issue Report'), ('financial', 'Financial Update'), ('inspection', 'Inspection Report'), ('general', 'General Update')], default='progress', max_length=20)),
                ('is_inspector_update', models.BooleanField(default=False)),
                ('progress_percentage', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('has_issues', models.BooleanField(default=False)),
                ('issue_severity', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('resolution_required', models.BooleanField(default=False)),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True, help_text='Visible to project stakeholders')),
                ('notify_stakeholders', models.BooleanField(default=True)),
                ('notification_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_updates', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updates', to='projects.projectmilestone')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='updates', to='projects.project')),
            ],
            options={
                'verbose_name': 'Project Update',
                'verbose_name_plural': 'Project Updates',
                'db_table': 'project_updates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_type', models.CharField(choices=[('general', 'General Comment'), ('question', 'Question'), ('concern', 'Concern'), ('suggestion', 'Suggestion'), ('approval', 'Approval'), ('rejection', 'Rejection')], default='general', max_length=20)),
                ('content', models.TextField()),
                ('is_internal', models.BooleanField(default=False, help_text='Internal comment not visible to all stakeholders')),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_comments', to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='projects.projectcomment')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='projects.project')),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='projects.inspectionreport')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_comments', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='projects.projectmilestone')),
                ('update', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='projects.projectupdate')),
            ],
            options={
                'verbose_name': 'Project Comment',
                'verbose_name_plural': 'Project Comments',
                'db_table': 'project_comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['owner'], name='projects_owner_i_c299b3_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['status'], name='projects_status_6303d7_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['project_type'], name='projects_project_3c9de1_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['country', 'city'], name='projects_country_899497_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['planned_start_date'], name='projects_planned_173939_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['created_at'], name='projects_created_40bcd1_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmilestone',
            index=models.Index(fields=['project', 'status'], name='project_mil_project_bc846a_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmilestone',
            index=models.Index(fields=['planned_end_date'], name='project_mil_planned_e3d726_idx'),
        ),
        migrations.AddIndex(
            model_name='projectmilestone',
            index=models.Index(fields=['status'], name='project_mil_status_cca9a6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='projectmilestone',
            unique_together={('project', 'order')},
        ),
        migrations.AddIndex(
            model_name='projectdocument',
            index=models.Index(fields=['project', 'document_type'], name='project_doc_project_e8feba_idx'),
        ),
        migrations.AddIndex(
            model_name='projectdocument',
            index=models.Index(fields=['access_level'], name='project_doc_access__8c9c78_idx'),
        ),
        migrations.AddIndex(
            model_name='projectdocument',
            index=models.Index(fields=['is_latest_version'], name='project_doc_is_late_915114_idx'),
        ),
        migrations.AddIndex(
            model_name='projectdocument',
            index=models.Index(fields=['uploaded_by'], name='project_doc_uploade_d5721c_idx'),
        ),
        migrations.AddIndex(
            model_name='projectdocument',
            index=models.Index(fields=['created_at'], name='project_doc_created_67dd36_idx'),
        ),
        migrations.AddIndex(
            model_name='inspectionreport',
            index=models.Index(fields=['project', 'inspection_date'], name='inspection__project_46acda_idx'),
        ),
        migrations.AddIndex(
            model_name='inspectionreport',
            index=models.Index(fields=['inspector', 'status'], name='inspection__inspect_dc1b0d_idx'),
        ),
        migrations.AddIndex(
            model_name='inspectionreport',
            index=models.Index(fields=['overall_status'], name='inspection__overall_40ab8b_idx'),
        ),
        migrations.AddIndex(
            model_name='inspectionreport',
            index=models.Index(fields=['compliance_score'], name='inspection__complia_1eb52f_idx'),
        ),
        migrations.AddIndex(
            model_name='inspectionreport',
            index=models.Index(fields=['created_at'], name='inspection__created_63ca11_idx'),
        ),
        migrations.AddIndex(
            model_name='projectupdate',
            index=models.Index(fields=['project', 'created_at'], name='project_upd_project_3ff834_idx'),
        ),
        migrations.AddIndex(
            model_name='projectupdate',
            index=models.Index(fields=['update_type'], name='project_upd_update__ebe644_idx'),
        ),
        migrations.AddIndex(
            model_name='projectupdate',
            index=models.Index(fields=['has_issues'], name='project_upd_has_iss_aa0f99_idx'),
        ),
        migrations.AddIndex(
            model_name='projectupdate',
            index=models.Index(fields=['created_by'], name='project_upd_created_9a5b25_idx'),
        ),
        migrations.AddIndex(
            model_name='projectcomment',
            index=models.Index(fields=['project', 'created_at'], name='project_com_project_1848b0_idx'),
        ),
        migrations.AddIndex(
            model_name='projectcomment',
            index=models.Index(fields=['author'], name='project_com_author__68a5d7_idx'),
        ),
        migrations.AddIndex(
            model_name='projectcomment',
            index=models.Index(fields=['comment_type'], name='project_com_comment_272d3e_idx'),
        ),
        migrations.AddIndex(
            model_name='projectcomment',
            index=models.Index(fields=['is_resolved'], name='project_com_is_reso_c7f65d_idx'),
        ),
    ]
