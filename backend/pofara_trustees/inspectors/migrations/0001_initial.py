# Generated by Django 5.2.4 on 2025-07-28 08:34

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InspectorCertification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Certification name', max_length=200)),
                ('issuing_organization', models.CharField(max_length=200)),
                ('certification_number', models.CharField(blank=True, max_length=100)),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('expired', 'Expired'), ('suspended', 'Suspended'), ('revoked', 'Revoked')], default='active', max_length=20)),
                ('certificate_image', models.ImageField(blank=True, null=True, upload_to='certifications/%Y/%m/')),
                ('description', models.TextField(blank=True, help_text='Description of what this certification covers')),
                ('verified', models.BooleanField(default=False)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inspector Certification',
                'verbose_name_plural': 'Inspector Certifications',
                'db_table': 'inspector_certifications',
            },
        ),
        migrations.CreateModel(
            name='InspectorDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('id_document', 'ID Document'), ('license', 'Professional License'), ('certificate', 'Certificate'), ('insurance', 'Insurance Policy'), ('portfolio', 'Portfolio Sample'), ('reference', 'Reference Letter'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(upload_to='inspector_documents/%Y/%m/')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('expiry_reminder_sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inspector Document',
                'verbose_name_plural': 'Inspector Documents',
                'db_table': 'inspector_documents',
            },
        ),
        migrations.CreateModel(
            name='InspectorRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(help_text='Overall rating from 1 to 5 stars', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.PositiveIntegerField(help_text='Quality of work rating', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('punctuality_rating', models.PositiveIntegerField(help_text='Punctuality and reliability rating', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('communication_rating', models.PositiveIntegerField(help_text='Communication skills rating', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review_title', models.CharField(blank=True, max_length=200)),
                ('review_text', models.TextField(blank=True, help_text='Written review from the user')),
                ('would_recommend', models.BooleanField(default=True)),
                ('would_hire_again', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False, help_text='Rating verified as legitimate')),
                ('is_flagged', models.BooleanField(default=False, help_text='Rating flagged for review')),
                ('moderation_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inspector Rating',
                'verbose_name_plural': 'Inspector Ratings',
                'db_table': 'inspector_ratings',
            },
        ),
        migrations.CreateModel(
            name='Inspector',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('in_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], default='pending', max_length=20)),
                ('verification_level', models.PositiveIntegerField(default=0, help_text='Verification level from 0 (unverified) to 5 (fully verified)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('license_number', models.CharField(blank=True, help_text='Professional license number', max_length=100)),
                ('license_expiry', models.DateField(blank=True, null=True)),
                ('experience_level', models.CharField(choices=[('entry', 'Entry Level (0-2 years)'), ('junior', 'Junior (2-5 years)'), ('senior', 'Senior (5-10 years)'), ('expert', 'Expert (10+ years)')], default='entry', max_length=20)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('specializations', models.JSONField(blank=True, default=list, help_text='List of inspection specializations (construction, electrical, plumbing, etc.)')),
                ('skills', models.JSONField(blank=True, default=list, help_text='List of technical skills and competencies')),
                ('languages_spoken', models.JSONField(blank=True, default=list, help_text='Languages the inspector can communicate in')),
                ('service_regions', models.JSONField(blank=True, default=list, help_text='Regions or cities where inspector provides services')),
                ('travel_radius_km', models.PositiveIntegerField(default=50, help_text='Maximum travel distance in kilometers')),
                ('available_weekdays', models.JSONField(blank=True, default=list, help_text='Available days of the week (0=Monday, 6=Sunday)')),
                ('available_hours_start', models.TimeField(default='09:00')),
                ('available_hours_end', models.TimeField(default='17:00')),
                ('base_hourly_rate', models.DecimalField(decimal_places=2, default=0.0, help_text='Base hourly rate in local currency', max_digits=10)),
                ('travel_rate_per_km', models.DecimalField(decimal_places=2, default=0.0, help_text='Travel cost per kilometer', max_digits=8)),
                ('minimum_charge', models.DecimalField(decimal_places=2, default=0.0, help_text='Minimum charge for any inspection', max_digits=10)),
                ('total_inspections', models.PositiveIntegerField(default=0)),
                ('completed_inspections', models.PositiveIntegerField(default=0)),
                ('cancelled_inspections', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('is_available', models.BooleanField(default=True)),
                ('is_accepting_new_projects', models.BooleanField(default=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('background_check_status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('passed', 'Passed'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('background_check_date', models.DateTimeField(blank=True, null=True)),
                ('background_check_expiry', models.DateTimeField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, help_text='Professional bio and experience summary', max_length=1000)),
                ('portfolio_images', models.JSONField(blank=True, default=list, help_text='List of portfolio image URLs')),
                ('bank_account_verified', models.BooleanField(default=False)),
                ('payment_method_verified', models.BooleanField(default=False)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('onboarding_completed_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_inspectors', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='inspector_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inspector',
                'verbose_name_plural': 'Inspectors',
                'db_table': 'inspectors',
            },
        ),
        migrations.CreateModel(
            name='InspectorAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('status', models.CharField(choices=[('available', 'Available'), ('booked', 'Booked'), ('blocked', 'Blocked'), ('holiday', 'Holiday')], default='available', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this time slot')),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurring_pattern', models.JSONField(blank=True, default=dict, help_text='Recurring pattern configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booked_inspector_slots', to=settings.AUTH_USER_MODEL)),
                ('inspector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_windows', to='inspectors.inspector')),
            ],
            options={
                'verbose_name': 'Inspector Availability',
                'verbose_name_plural': 'Inspector Availability',
                'db_table': 'inspector_availability',
            },
        ),
    ]
